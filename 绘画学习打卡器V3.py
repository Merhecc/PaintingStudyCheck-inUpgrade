"""
插槽式绘画学习打卡小程序 V3 现代化版 - 带感受和图片上传功能
优化版本：提高运行效率，不改变原有功能和界面
添加右键菜单功能，分离日志和插槽数据存储
"""
import os
import json
import datetime
import tkinter as tk
import tempfile
from tkinter import ttk, filedialog, messagebox, simpledialog, colorchooser, scrolledtext
from PIL import Image, ImageTk
import shutil
import base64
import copy
from functools import lru_cache
import sys
import webbrowser

# 图标数据（保持不变）
ICON_BASE64 = "

# 获取Windows文档文件夹路径的可靠方法
@lru_cache(maxsize=1)
def get_documents_folder():
    try:
        # 方法1: 使用已知的环境变量
        if 'USERPROFILE' in os.environ:
            documents_path = os.path.join(os.environ['USERPROFILE'], 'Documents')
            if os.path.exists(documents_path):
                return documents_path
        
        # 方法2: 使用pathlib (更现代的方法)
        try:
            from pathlib import Path
            documents_path = Path.home() / "Documents"
            if documents_path.exists():
                return str(documents_path)
        except:
            pass
        
        # 方法3: 使用expanduser
        documents_path = os.path.expanduser("~\\Documents")
        if os.path.exists(documents_path):
            return documents_path
        
        # 方法4: 尝试其他可能的路径
        possible_paths = [
            os.path.join(os.environ['USERPROFILE'], 'My Documents') if 'USERPROFILE' in os.environ else "",
            os.path.expanduser('~\\My Documents'),
        ]
        
        for path in possible_paths:
            if path and os.path.exists(path):
                return path
        
        # 如果所有方法都失败，使用当前目录并打印警告
        print("警告: 无法找到文档文件夹，使用当前目录")
        return "."
    except Exception as e:
        print(f"获取文档文件夹时出错: {e}")
        return "."

# 设置全局路径变量
DOCUMENTS_FOLDER = get_documents_folder()
APP_FOLDER = os.path.join(DOCUMENTS_FOLDER, "绘画学习打卡器")
os.makedirs(APP_FOLDER, exist_ok=True)
SAVE_FILE = os.path.join(APP_FOLDER, 'painter_progress_v3.json')
LOG_FILE = os.path.join(APP_FOLDER, 'painter_logs_v3.json')  # 新增日志文件

# 打印路径信息用于调试
print(f"文档文件夹: {DOCUMENTS_FOLDER}")
print(f"应用文件夹: {APP_FOLDER}")
print(f"保存文件: {SAVE_FILE}")
print(f"日志文件: {LOG_FILE}")

DEFAULT_SLOTS = {
    "人体解剖与肢体": {"xp": 0, "target": 100, "increment": 10, "level": 1, "color": "#4A90E2"},
    "头部与五官": {"xp": 0, "target": 80, "increment": 8, "level": 1, "color": "#50E3C2"},
    "光影与上色": {"xp": 0, "target": 80, "increment": 8, "level": 1, "color": "#B8E986"},
    "色彩搭配": {"xp": 0, "target": 70, "increment": 7, "level": 1, "color": "#F5A623"},
    "空间与场景": {"xp": 0, "target": 100, "increment": 10, "level": 1, "color": "#BD10E0"},
    "综合插画": {"xp": 0, "target": 150, "increment": 15, "level": 1, "color": "#FF6B6B"},
}

class DakaApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("绘画学习打卡器 V3")
        self.geometry("750x750")
        self.minsize(750, 650)

        # 设置窗口图标
        self.temp_icon_file = None
        self.create_icon_file()  # 创建临时图标文件
        self.set_window_icon()   # 设置根窗口图标
        
        # 外框
        self.configure(bg="#ECECEC")
        
        # 计算窗口在屏幕中央的位置
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        x = (screen_width - 750) // 2
        y = (screen_height - 750) // 2
        self.geometry(f"750x750+{x}+{y}")

        os.makedirs(APP_FOLDER, exist_ok=True)
        
        # 设置现代主题
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.configure_styles()
        
        self.data = {"slots": {}}  # 只存储插槽数据
        self.logs = []  # 单独存储日志数据
        self.last_saved_data = None  # 用于跟踪上次保存的数据
        self.load_data()
        self.create_widgets()
        self.refresh_ui()
        
        # 绑定窗口关闭事件
        self.protocol("WM_DELETE_WINDOW", self.on_close)

    def create_icon_file(self):
        """创建临时图标文件 - 优化版本：避免重复创建"""
        if hasattr(self, 'global_temp_icon_file') and os.path.exists(self.global_temp_icon_file):
            self.temp_icon_file = self.global_temp_icon_file
            return
            
        try:
            # 去除可能的空白字符
            icon_base64 = ICON_BASE64.strip()
            
            # 确保 base64 字符串长度是 4 的倍数
            padding = len(icon_base64) % 4
            if padding != 0:
                icon_base64 += '=' * (4 - padding)
            
            # 解码 base64 字符串
            icon_data = base64.b64decode(icon_base64)
            
            # 创建临时文件
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ico') as tmp_file:
                tmp_file.write(icon_data)
                self.temp_icon_file = tmp_file.name
                # 保存为全局临时文件，避免重复创建
                self.global_temp_icon_file = self.temp_icon_file
        except Exception as e:
            print(f"创建临时图标文件失败: {e}")
            self.temp_icon_file = None

    def set_window_icon(self):
        """设置窗口图标"""
        if self.temp_icon_file and os.path.exists(self.temp_icon_file):
            try:
                self.iconbitmap(self.temp_icon_file)
            except Exception as e:
                print(f"设置窗口图标失败: {e}")

    def on_close(self):
        """窗口关闭时的清理操作"""
        try:
            # 删除全局临时图标文件
            if hasattr(self, 'global_temp_icon_file') and os.path.exists(self.global_temp_icon_file):
                os.remove(self.global_temp_icon_file)
            
            # 删除其他临时图标文件
            if hasattr(self, 'temp_icon_files'):
                for tmp_file in self.temp_icon_files:
                    try:
                        if os.path.exists(tmp_file):
                            os.remove(tmp_file)
                    except:
                        pass
        except:
            pass
        self.destroy()

    def configure_styles(self):
        """配置现代化样式"""
        # 插槽标题栏
        self.style.configure('Modern.TFrame', background="#808080")
        self.style.configure('BetweenLine.TFrame', background="#606060")
        # 标题字体
        self.style.configure('Title.TLabel', 
                            font=('微软雅黑', 12, 'bold'),
                            foreground="#0F0F0F")
        # 卡片包围线
        self.style.configure('Card.TFrame', 
                            background="#FFFFFF",
                            relief='flat',
                            borderwidth=1)
        # 卡片包围线
        self.style.configure('ButtonBG.TFrame', 
                            background='#ECECEC',
                            relief='flat',
                            borderwidth=1)
        # 进度条标题
        self.style.configure('SlotTitle.TLabel',
                            font=('微软雅黑', 12, 'bold'),
                            padding=(5, 5))
        
        self.style.configure('Primary.TButton',
                            font=('微软雅黑', 9),
                            padding=(10, 5),
                            background='#4A90E2',
                            foreground='white')
        self.style.configure('HighLine.TButton',
                            font=('微软雅黑', 9),
                            padding=(10, 5),
                            background="#DDC228",
                            foreground='white')
        # 其他按钮
        self.style.configure('Secondary.TButton',
                            font=('微软雅黑', 9),
                            padding=(10, 5),
                            background='#E5E9F0',
                            foreground='#2C3E50')
        self.style.map('Primary.TButton',
                      background=[('active', '#3A70B2')])
        self.style.map('HighLine.TButton',
                      background=[('active', "#8D8530")])
        self.style.map('Secondary.TButton',
                      background=[('active', '#D0D6E0')])

    def load_data(self):
        """加载数据 - 分离日志和插槽数据"""
        # 加载插槽数据
        if os.path.exists(SAVE_FILE):
            try:
                with open(SAVE_FILE, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
                self.last_saved_data = copy.deepcopy(self.data)
            except Exception as e:
                print("读取进度文件失败，使用默认配置。", e)
                self.data = {"slots": DEFAULT_SLOTS.copy()}
                self.last_saved_data = copy.deepcopy(self.data)
        else:
            self.data = {"slots": DEFAULT_SLOTS.copy()}
            self.last_saved_data = copy.deepcopy(self.data)
            self.save_data()
        
        # 加载日志数据
        if os.path.exists(LOG_FILE):
            try:
                with open(LOG_FILE, 'r', encoding='utf-8') as f:
                    self.logs = json.load(f)
            except Exception as e:
                print("读取日志文件失败，使用空日志。", e)
                self.logs = []
        else:
            self.logs = []
            self.save_logs()

    def save_data(self):
        """保存插槽数据到文件 - 优化版本：避免不必要的保存"""
        # 检查数据是否发生变化
        if self.last_saved_data == self.data:
            return
            
        try:
            # 确保应用文件夹存在
            os.makedirs(APP_FOLDER, exist_ok=True)
            
            # 使用全局定义的SAVE_FILE路径
            with open(SAVE_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            self.last_saved_data = copy.deepcopy(self.data)
            print(f"插槽数据已保存到: {SAVE_FILE}")
        except Exception as e:
            print(f"保存插槽数据失败: {e}")
            messagebox.showerror("保存失败", f"无法保存进度：{e}")

    def save_logs(self):
        """保存日志数据到单独的文件"""
        try:
            # 确保应用文件夹存在
            os.makedirs(APP_FOLDER, exist_ok=True)
            
            # 使用全局定义的LOG_FILE路径
            with open(LOG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.logs, f, ensure_ascii=False, indent=2)
            print(f"日志数据已保存到: {LOG_FILE}")
        except Exception as e:
            print(f"保存日志数据失败: {e}")

    def create_widgets(self):
        # 主容器
        main_container = ttk.Frame(self, style='Modern.TFrame')
        main_container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # 标题
        title_frame = ttk.Frame(main_container)
        title_frame.pack(fill='both', pady=(0, 0))

        # 内容区域
        content_frame = ttk.Frame(main_container)
        content_frame.pack(fill='both', expand=True)
        
        # 左侧插槽区域,标题分割线
        left_container = ttk.Frame(content_frame, style='Modern.TFrame')
        left_container.pack(side='left', fill='both', expand=True, padx=(0, 15))
        
        # 右侧控制面板
        right_container = ttk.Frame(content_frame, width=300)
        right_container.pack(side='left', fill='y', padx=(0, 15), pady=(15, 15))
        right_container.pack_propagate(False)
        
        # 创建左侧滚动区域
        self.create_slots_area(left_container)
        
        # 创建右侧控制面板
        self.create_control_panel(right_container)
        
        # 创建右键菜单
        self.create_context_menu()

    def create_context_menu(self):
        """创建右键上下文菜单"""
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="重置插槽", command=self.context_reset_slot)
        self.context_menu.add_command(label="调整增量", command=self.context_adjust_increment)
        self.context_menu.add_command(label="修改颜色", command=self.context_change_color)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="删除插槽", command=self.context_delete_slot)
        
        # 存储当前选中的插槽
        self.current_context_slot = None

    def show_context_menu(self, event, slot_name):
        """显示右键菜单"""
        self.current_context_slot = slot_name
        self.context_menu.post(event.x_root, event.y_root)

    def context_reset_slot(self):
        """右键菜单 - 重置插槽"""
        if self.current_context_slot:
            self.reset_slot(self.current_context_slot)

    def context_adjust_increment(self):
        """右键菜单 - 调整增量"""
        if self.current_context_slot:
            # 创建自定义对话框
            dialog = tk.Toplevel(self)
            dialog.title(f"调整增量 - {self.current_context_slot}")
            dialog.geometry("300x150")
            dialog.transient(self)
            dialog.grab_set()
            
            # 设置对话框背景颜色与主程序一致
            dialog.configure(bg="#ECECEC")
            
            # 设置自定义图标
            self.set_window_icon_for_toplevel(dialog)
            
            # 计算居中位置
            screen_width = dialog.winfo_screenwidth()
            screen_height = dialog.winfo_screenheight()
            x = (screen_width - 300) // 2
            y = (screen_height - 150) // 2
            dialog.geometry(f"300x150+{x}+{y}")
            
            # 添加标签 - 设置与背景一致的颜色
            label = ttk.Label(dialog, text=f"请输入{self.current_context_slot}的新增量值:", 
                             font=('微软雅黑', 10),
                             background="#ECECEC")
            label.pack(pady=(20, 10))
            
            # 添加输入框
            current_value = self.data['slots'][self.current_context_slot]['increment']
            spinbox = tk.Spinbox(dialog, from_=1, to=100, width=10, 
                               font=('微软雅黑', 10), bg='white', relief='solid',
                               highlightthickness=1, highlightcolor='#4A90E2',
                               highlightbackground='#CCD1D9')
            spinbox.delete(0, "end")
            spinbox.insert(0, str(current_value))
            spinbox.pack(pady=(0, 20))
            
            # 按钮框架 - 设置与背景一致的颜色
            button_frame = ttk.Frame(dialog, style='ButtonBG.TFrame')
            button_frame.pack()
            
            # 确定按钮
            def confirm():
                try:
                    new_value = int(spinbox.get())
                    if 1 <= new_value <= 100:
                        self.update_increment(self.current_context_slot, new_value)
                        dialog.destroy()
                    else:
                        messagebox.showerror("错误", "增量值必须在1-100之间")
                except ValueError:
                    messagebox.showerror("错误", "请输入有效的数字")
            
            ok_btn = ttk.Button(button_frame, text="确定", command=confirm, 
                               style='Primary.TButton')
            ok_btn.pack(side='left', padx=(0, 10))
            
            # 取消按钮
            cancel_btn = ttk.Button(button_frame, text="取消", command=dialog.destroy,
                                   style='Secondary.TButton')
            cancel_btn.pack(side='left')
            
            # 绑定回车键
            dialog.bind('<Return>', lambda e: confirm())
            spinbox.focus_set()

    def context_change_color(self):
        """右键菜单 - 修改颜色"""
        if self.current_context_slot:
            self.choose_color(self.current_context_slot)

    def context_delete_slot(self):
        """右键菜单 - 删除插槽"""
        if self.current_context_slot:
            # 确认删除
            if messagebox.askyesno("确认删除", f"确定要删除插槽 '{self.current_context_slot}' 吗？此操作不可撤销！"):
                self.delete_slot(self.current_context_slot)

    def delete_slot(self, slot_name):
        """删除指定插槽"""
        # 从数据中删除
        if slot_name in self.data['slots']:
            del self.data['slots'][slot_name]
            
            # 从UI中删除
            if slot_name in self.slot_frames:
                self.slot_frames[slot_name]['frame'].destroy()
                del self.slot_frames[slot_name]
            
            # 添加日志
            self.add_log(f"已删除插槽: {slot_name}")
            
            # 保存数据
            self.save_data()
            
            # 更新滚动区域
            self.slots_canvas.configure(scrollregion=self.slots_canvas.bbox("all"))

    def create_slots_area(self, parent):
        # 创建画布和滚动条
        canvas = tk.Canvas(parent, bg='#F5F7FA', highlightthickness=0)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas, style='Modern.TFrame')

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        self.scrollable_frame = scrollable_frame
        self.slot_frames = {}
        
        # 存储画布和滚动条引用，以便在其他方法中使用
        self.slots_canvas = canvas
        self.slots_scrollbar = scrollbar
        
        # 添加鼠标滚轮支持
        def _on_mousewheel(event):
            # 检查事件是否发生在插槽区域内
            if self.is_mouse_in_slots_area(event.x_root, event.y_root):
                # Windows 和 macOS 使用 delta
                if hasattr(event, 'delta'):
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
                # Linux 使用 num 和 button
                elif event.num == 4:
                    canvas.yview_scroll(-1, "units")
                elif event.num == 5:
                    canvas.yview_scroll(1, "units")
                return "break"  # 阻止事件继续传播
        
        # 绑定鼠标滚轮事件到画布和可滚动区域
        canvas.bind("<MouseWheel>", _on_mousewheel)
        canvas.bind("<Button-4>", _on_mousewheel)  # Linux 向上滚动
        canvas.bind("<Button-5>", _on_mousewheel)  # Linux 向下滚动
        
        # 为可滚动区域绑定鼠标滚轮事件
        scrollable_frame.bind("<MouseWheel>", _on_mousewheel)
        scrollable_frame.bind("<Button-4>", _on_mousewheel)  # Linux 向上滚动
        scrollable_frame.bind("<Button-5>", _on_mousewheel)  # Linux 向下滚动
        
        # 为所有现有和未来的子部件绑定鼠标滚轮事件
        def bind_mousewheel_to_children(widget):
            # 为当前部件绑定
            widget.bind("<MouseWheel>", _on_mousewheel)
            widget.bind("<Button-4>", _on_mousewheel)
            widget.bind("<Button-5>", _on_mousewheel)
            
            # 为所有子部件绑定
            for child in widget.winfo_children():
                bind_mousewheel_to_children(child)
        
        # 初始绑定
        bind_mousewheel_to_children(scrollable_frame)
        
        # 当添加新插槽时重新绑定
        original_add_slot_ui = self.add_slot_ui
        def add_slot_ui_with_binding(name):
            original_add_slot_ui(name)
            # 为新添加的插槽绑定鼠标滚轮事件
            bind_mousewheel_to_children(self.scrollable_frame)
        
        self.add_slot_ui = add_slot_ui_with_binding
        
        for name in self.data['slots']:
            self.add_slot_ui(name)

    def is_mouse_in_slots_area(self, x_root, y_root):
        """检查鼠标是否在插槽区域内"""
        # 获取插槽区域的屏幕坐标
        canvas_x = self.slots_canvas.winfo_rootx()
        canvas_y = self.slots_canvas.winfo_rooty()
        canvas_width = self.slots_canvas.winfo_width()
        canvas_height = self.slots_canvas.winfo_height()
        
        # 检查鼠标是否在插槽区域内
        return (canvas_x <= x_root <= canvas_x + canvas_width and 
                canvas_y <= y_root <= canvas_y + canvas_height)

    def create_control_panel(self, parent):
        # 控制面板标题
        ttk.Label(parent, text="控制面板", style='Title.TLabel').pack(anchor='w', pady=(0, 15))
        
        # 控制按钮
        control_buttons = [
            ("新建插槽", self.create_slot_dialog),
            ("导出进度 (JSON)", self.export_json),
            ("导入进度 (JSON)", self.import_json),
            ("重置所有进度", self.reset_all),
        ]
        other_buttons = [
            ("打开教程/素材", self.open_tutorial)
        ]
        
        for text, command in control_buttons:
            btn = ttk.Button(parent, text=text, command=command, style='Primary.TButton')
            btn.pack(fill='x', pady=5)
        for text, command in other_buttons:
            btn = ttk.Button(parent, text=text, command=command, style='HighLine.TButton')
            btn.pack(fill='x', pady=5)
        
        # 分隔线
        separator = ttk.Separator(parent, orient='horizontal')
        separator.pack(fill='x', pady=20)
        
        # 日志区域
        ttk.Label(parent, text="操作日志", style='SlotTitle.TLabel').pack(anchor='w', pady=(0, 10))

        log_frame = ttk.Frame(parent, style='Card.TFrame')
        log_frame.pack(fill='both', expand=True)

        self.log_text = tk.Text(log_frame, height=15, width=30, state="disabled", 
                            wrap="word", font=('微软雅黑', 9), bg='#FFFFFF',
                            relief='flat', padx=10, pady=10)
        log_scrollbar = ttk.Scrollbar(log_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=log_scrollbar.set)

        self.log_text.pack(side="left", fill="both", expand=True)
        log_scrollbar.pack(side="right", fill="y")
        
        # 添加日志缓存，避免频繁更新
        self.last_log_count = 0

    def get_level_color(self, level):
        """根据等级返回对应的颜色，沿着光谱移动"""
        # 定义颜色映射：1级红色，5级黄色，10级绿色，20级蓝色
        if level <= 1:
            return "#FF0000"  # 红色
        elif level <= 5:
            # 从红色到黄色的渐变
            r = 255
            g = int(255 * (level - 1) / 4)
            b = 0
            return f"#{r:02X}{g:02X}{b:02X}"
        elif level <= 10:
            # 从黄色到绿色的渐变
            r = int(255 * (10 - level) / 5)
            g = 255
            b = 0
            return f"#{r:02X}{g:02X}{b:02X}"
        elif level <= 20:
            # 从绿色到蓝色的渐变
            r = 0
            g = int(255 * (20 - level) / 10)
            b = int(255 * (level - 10) / 10)
            return f"#{r:02X}{g:02X}{b:02X}"
        else:
            # 20级以上保持蓝色，并稍微增加亮度
            brightness = min(1.0, 0.7 + (level - 20) * 0.01)
            r = 0
            g = int(100 * brightness)
            b = int(255 * brightness)
            return f"#{r:02X}{g:02X}{b:02X}"
   
    def add_slot_ui(self, name):
        slot = self.data['slots'][name]
        card_frame = ttk.Frame(self.scrollable_frame, style='Card.TFrame')
        card_frame.pack(fill='x', pady=6, padx=7)
        
        # 标题栏
        title_frame = ttk.Frame(card_frame)
        title_frame.pack(fill='x', padx=15, pady=(15, 10))
        
        # 使用彩色标签 - 改为可点击的
        color_label = tk.Label(title_frame, text="      ", bg=slot.get('color', '#4A90E2'), 
                            font=('微软雅黑', 4), height=5, cursor="hand2")
        color_label.pack(side='left', padx=(0, 10))
        # 绑定点击事件
        color_label.bind("<Button-1>", lambda e, n=name: self.choose_color(n))
        
        # 进度条
        progress_frame = ttk.Frame(card_frame)
        progress_frame.pack(fill='x', padx=15, pady=(0, 10))
        
        # 创建自定义进度条样式，使用插槽的颜色
        slot_color = slot.get('color', '#4A90E2')
        progressbar_style_name = f"Progress.{name}.Horizontal.TProgressbar"
        
        # 配置进度条样式
        self.style.configure(progressbar_style_name,
                            background=slot_color,
                            troughcolor="#F0E5EA",
                            borderwidth=0,
                            lightcolor=slot_color,
                            darkcolor=slot_color)
        
        pb = ttk.Progressbar(progress_frame, orient="horizontal", 
                            style=progressbar_style_name)  # 使用自定义样式
        pb.pack(fill='x', pady=(0, 5))
        
        stats_label = ttk.Label(progress_frame, text="", font=('微软雅黑', 9), 
                               foreground='#7F8C8D')
        stats_label.pack(fill='x')
        
        # 按钮区域
        button_frame = ttk.Frame(card_frame)
        button_frame.pack(fill='x', padx=15, pady=(0, 15))
        
        # 第一行按钮
        btn_row1 = ttk.Frame(button_frame)
        btn_row1.pack(fill='x', pady=(0, 5))
        
        add_btn = ttk.Button(btn_row1, text="打卡 +", 
                            command=lambda n=name: self.add_xp(n),
                            style='Primary.TButton')
        add_btn.pack(side='left', padx=(0, 5))
        
        boss_btn = ttk.Button(btn_row1, text="Boss 成就", 
                             command=lambda n=name: self.boss_reward(n),
                             style='Secondary.TButton')
        boss_btn.pack(side='left', padx=5)
        
        reset_btn = ttk.Button(btn_row1, text="重置", 
                              command=lambda n=name: self.reset_slot(n),
                              style='Secondary.TButton')
        reset_btn.pack(side='left', padx=5)
        
        # 第二行按钮
        btn_row2 = ttk.Frame(button_frame)
        btn_row2.pack(fill='x')
        
        # 新增查看记录按钮
        view_records_btn = ttk.Button(btn_row2, text="查看记录", 
                                     command=lambda n=name: self.open_slot_records(n),
                                     style='Secondary.TButton')
        view_records_btn.pack(side='left', padx=(0, 5))
        
        # 添加悬停效果
        def on_enter(e):
            e.widget.config(relief="solid")

        def on_leave(e):
            e.widget.config(relief="flat")

        color_label.bind("<Enter>", on_enter)
        color_label.bind("<Leave>", on_leave)
        
        title_label = ttk.Label(title_frame, text=name, style='SlotTitle.TLabel')
        title_label.pack(side='left')
        
        level_label = ttk.Label(title_frame, text="", font=('微软雅黑', 10, 'bold'))
        level_label.pack(side='right')

        # 存储UI元素引用
        self.slot_frames[name] = {
            "frame": card_frame, 
            "title": title_label, 
            "level": level_label,
            "pb": pb, 
            "stats": stats_label, 
            "color_label": color_label,
            "add_btn": add_btn, 
            "boss_btn": boss_btn,
            "view_records_btn": view_records_btn,
            "progressbar_style": progressbar_style_name  # 存储样式名称以便后续更新
        }
        
        # 绑定双击事件
        card_frame.bind("<Double-Button-1>", lambda e, n=name: self.show_slot_detail(n))
        title_label.bind("<Double-Button-1>", lambda e, n=name: self.show_slot_detail(n))
        
        # 绑定右键菜单事件 - 扩大到整个卡片区域
        card_frame.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        title_frame.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        progress_frame.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        button_frame.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        title_label.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        level_label.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        color_label.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        stats_label.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        add_btn.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        boss_btn.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        reset_btn.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))
        view_records_btn.bind("<Button-3>", lambda e, n=name: self.show_context_menu(e, n))

    def refresh_ui(self):
        # 只更新有变化的插槽
        for name, s in self.data['slots'].items():
            widgets = self.slot_frames.get(name)
            if not widgets: 
                continue
                
            xp = s.get('xp', 0)
            target = s.get('target', 100)
            level = s.get('level', 1)
            
            # 只更新有变化的进度条
            if widgets['pb']['value'] != min(xp, target) or widgets['pb']['maximum'] != target:
                widgets['pb']['maximum'] = target
                widgets['pb']['value'] = min(xp, target)
            
            progress_percent = (xp / target) * 100 if target > 0 else 0
            stats_text = f"XP: {xp}/{target} • 进度: {progress_percent:.1f}% • +{s.get('increment', 10)}/打卡"
            
            # 只更新有变化的统计文本
            if widgets['stats']['text'] != stats_text:
                widgets['stats']['text'] = stats_text
            
            # 设置等级文本和颜色
            level_text = f"Lv.{level} {'(已完成)' if xp >= target else ''}"
            level_color = self.get_level_color(level)
            
            # 只更新有变化的等级文本
            if widgets['level']['text'] != level_text or widgets['level']['foreground'] != level_color:
                widgets['level']['text'] = level_text
                widgets['level']['foreground'] = level_color
            
            # 更新颜色标签
            current_color = s.get('color', '#4A90E2')
            if widgets['color_label'].cget('bg') != current_color:
                widgets['color_label'].configure(bg=current_color)
                
            # 更新进度条颜色
            if widgets['color_label'].cget('bg') != current_color:
                progressbar_style_name = widgets['progressbar_style']
                self.style.configure(progressbar_style_name,
                                    background=current_color,
                                    lightcolor=current_color,
                                    darkcolor=current_color)

        # 更新日志 - 只在有变化时更新
        if len(self.logs) != self.last_log_count:
            self.log_text.configure(state="normal")
            self.log_text.delete("1.0", "end")
            for log in self.logs:
                self.log_text.insert("end", f"{log['time']} - {log['text']}\n")
            # 滚动到最底部（显示最新日志）
            self.log_text.see("end")
            self.log_text.configure(state="disabled")
            self.last_log_count = len(self.logs)
    
    def add_log(self, text):
        entry = {"time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "text": text}
        self.logs.append(entry)
        # 限制日志数量，避免内存占用过大
        if len(self.logs) > 1000:
            self.logs = self.logs[-500:]
        self.save_logs()
        self.refresh_ui()

    def add_xp(self, slot_name):
        # 先收集感受和图片
        feeling, image_path, user_confirmed = self.collect_daily_data(slot_name)
        
        # 只有当用户点击了"确认打卡"按钮时才增加经验值
        if not user_confirmed:
            return  # 用户关闭了窗口，不增加经验值
            
        s = self.data['slots'][slot_name]
        inc = int(s.get('increment', 10))
        s['xp'] += inc
        self.add_log(f"打卡：{slot_name} +{inc} XP (当前 {s['xp']}/{s['target']})")
        if s['xp'] >= s['target']:
            s['level'] += 1
            old_target = s['target']
            s['xp'] = 0
            s['target'] = int(old_target * 1.25)
            self.add_log(f"插槽升级！{slot_name} 升到 Lv{s['level']} ，新目标 {s['target']} XP")
        self.save_data()
        self.refresh_ui()

    def collect_daily_data(self, slot_name):
        """收集每日打卡的感受和图片"""
        # 创建弹出窗口
        popup = tk.Toplevel(self)   
        popup.title(f"{slot_name} - 打卡记录")
        popup.geometry("500x400")
        
        # 计算窗口在屏幕中央的位置
        screen_width = popup.winfo_screenwidth()
        screen_height = popup.winfo_screenheight()
        x = (screen_width - 500) // 2
        y = (screen_height - 400) // 2
        popup.geometry(f"500x400+{x}+{y}")

        popup.transient(self)
        popup.grab_set()
        
        # 设置 Toplevel 窗口的图标
        self.set_window_icon_for_toplevel(popup)

        # 添加一个标志，记录用户是确认打卡还是关闭窗口
        user_confirmed = [False]  # 使用列表以便在内部函数中修改
        
        # 感受输入区域
        bg_color = popup.cget('bg')
        tk.Label(popup, text="今日练习感受:", font=('微软雅黑', 12, 'bold'), bg=bg_color).pack(anchor='w', padx=20, pady=(20, 5))
        feeling_text = scrolledtext.ScrolledText(popup, height=8, wrap='word', font=('微软雅黑', 12))
        feeling_text.pack(fill='x', padx=20, pady=(0, 10))
        
        # 图片选择区域
        image_frame = ttk.Frame(popup)
        image_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        image_path = tk.StringVar()
        
        def select_image():
            path = filedialog.askopenfilename(
                title="选择今日练习图片",
                filetypes=[("图片文件", "*.png;*.jpg;*.jpeg;*.gif;*.bmp")]
            )
            if path:
                image_path.set(path)
                # 显示缩略图
                try:
                    img = Image.open(path)
                    img.thumbnail((100, 100), Image.Resampling.LANCZOS)  # 使用更高效的缩略图算法
                    photo = ImageTk.PhotoImage(img)
                    img_label.configure(image=photo)
                    img_label.image = photo  # 保持引用
                except Exception as e:
                    messagebox.showerror("错误", f"无法加载图片: {e}")
        
        ttk.Button(image_frame, text="选择图片", command=select_image, style='Secondary.TButton').pack(side='left')
        img_label = ttk.Label(image_frame, text="未选择图片")
        img_label.pack(side='left', padx=(10, 0))
        
        # 确定按钮
        result = [None, None]  # 用于存储结果
        
        def confirm():
            user_confirmed[0] = True
            result[0] = feeling_text.get("1.0", "end-1c")
            result[1] = image_path.get()
            popup.destroy()
            
            # 保存数据到文件
            if result[0] or result[1]:
                self.save_daily_data(slot_name, result[0], result[1])
        
        ttk.Button(popup, text="确认打卡", command=confirm, style='Primary.TButton').pack(pady=(0, 20))
        
        # 处理窗口关闭事件
        def on_closing():
            # 用户点击了关闭按钮，不设置 user_confirmed 标志
            popup.destroy()
        
        popup.protocol("WM_DELETE_WINDOW", on_closing)
        
        # 等待窗口关闭
        self.wait_window(popup)
        
        # 返回结果和用户确认状态
        return result[0], result[1], user_confirmed[0]

    def set_window_icon_for_toplevel(self, toplevel_window):
        """为 Toplevel 窗口设置图标 - 使用全局临时文件"""
        if hasattr(self, 'global_temp_icon_file') and os.path.exists(self.global_temp_icon_file):
            try:
                toplevel_window.iconbitmap(self.global_temp_icon_file)
            except Exception as e:
                print(f"设置 Toplevel 窗口图标失败: {e}")

    def save_daily_data(self, slot_name, feeling, image_path):
        """保存每日打卡数据到文档文件夹"""
        try:
            # 使用全局定义的APP_FOLDER路径
            RECORDS_FOLDER = os.path.join(APP_FOLDER, "打卡记录")
            os.makedirs(RECORDS_FOLDER, exist_ok=True)
            
            # 创建插槽文件夹
            slot_dir = os.path.join(RECORDS_FOLDER, slot_name)
            os.makedirs(slot_dir, exist_ok=True)
            
            # 获取当前日期
            current_date = datetime.datetime.now().strftime("%Y年%m月%d日")
            
            # 检查今天已经打卡的次数
            try:
                date_dirs = [d for d in os.listdir(slot_dir) if d.startswith(current_date)]
                practice_count = len(date_dirs) + 1
            except Exception as e:
                print(f"读取目录失败: {e}")
                practice_count = 1
            
            # 创建日期文件夹
            if practice_count == 1:
                date_dir_name = f"{current_date} 第1次练习"
            else:
                date_dir_name = f"{current_date} 第{practice_count}次练习"
            
            date_dir = os.path.join(slot_dir, date_dir_name)
            os.makedirs(date_dir, exist_ok=True)
            
            # 保存感受文本
            if feeling:
                try:
                    feeling_path = os.path.join(date_dir, "感受记录.txt")
                    with open(feeling_path, 'w', encoding='utf-8') as f:
                        f.write(feeling)
                    print(f"感受记录已保存到: {feeling_path}")
                except Exception as e:
                    print(f"保存感受记录失败: {e}")
            
            # 保存图片
            if image_path and os.path.exists(image_path):
                try:
                    # 获取文件扩展名
                    _, ext = os.path.splitext(image_path)
                    # 复制图片到目标目录
                    target_image_path = os.path.join(date_dir, f"练习图片{ext}")
                    shutil.copy2(image_path, target_image_path)
                    print(f"图片已保存到: {target_image_path}")
                except Exception as e:
                    print(f"保存图片失败: {e}")
            
            self.add_log(f"{slot_name} 打卡记录已保存到: {date_dir_name}")
            print(f"打卡记录保存完成: {date_dir}")
            
        except Exception as e:
            print(f"保存打卡记录时发生错误: {e}")
            messagebox.showerror("保存失败", f"无法保存打卡记录: {e}")

    def boss_reward(self, slot_name):
        if not messagebox.askyesno("Boss 成就", f"确认要奖励 {slot_name} 2倍经验？"): 
            return
        
        # 先收集感受和图片
        feeling, image_path, user_confirmed = self.collect_daily_data(slot_name)
        
        # 只有当用户点击了"确认打卡"按钮时才增加经验值
        if not user_confirmed:
            return  # 用户关闭了窗口，不增加经验值
            
        s = self.data['slots'][slot_name]
        inc = int(s.get('increment', 10))
        s['xp'] += inc * 2
        self.add_log(f"Boss 奖励：{slot_name} +{inc*2} XP (当前 {s['xp']}/{s['target']})")
        if s['xp'] >= s['target']:
            s['level'] += 1
            old_target = s['target']
            s['xp'] = 0
            s['target'] = int(old_target * 1.25)
            self.add_log(f"插槽升级！{slot_name} 升到 Lv{s['level']} ，新目标 {s['target']} XP")
        self.save_data()
        self.refresh_ui()

    def update_increment(self, name, value):
        try: 
            v = int(value)
            if self.data['slots'][name]['increment'] != v:
                self.data['slots'][name]['increment'] = v
                self.add_log(f"更新增量：{name} 设置为 {v} /打卡")
        except: 
            pass
        self.save_data()
        self.refresh_ui()

    def choose_color(self, name):
        """选择颜色并更新颜色标签"""
        color = colorchooser.askcolor(
            title=f"选择插槽 {name} 颜色", 
            initialcolor=self.data['slots'][name].get('color', '#4A90E2')
        )[1]
        if color and color != self.data['slots'][name].get('color', '#4A90E2'):
            self.data['slots'][name]['color'] = color
            # 更新颜色标签
            if name in self.slot_frames:
                self.slot_frames[name]['color_label'].configure(background=color)
            
            self.save_data()
            self.refresh_ui()

    def create_slot_dialog(self):
        """创建新建插槽的自定义对话框"""
        # 创建自定义对话框
        dialog = tk.Toplevel(self)
        dialog.title("新建插槽")
        dialog.geometry("400x200")
        dialog.transient(self)
        dialog.grab_set()
        
        # 设置对话框背景颜色与主程序一致
        dialog.configure(bg="#ECECEC")
        
        # 设置自定义图标
        self.set_window_icon_for_toplevel(dialog)
        
        # 计算居中位置
        screen_width = dialog.winfo_screenwidth()
        screen_height = dialog.winfo_screenheight()
        x = (screen_width - 400) // 2
        y = (screen_height - 200) // 2
        dialog.geometry(f"400x200+{x}+{y}")
        
        # 添加名称输入标签
        name_label = ttk.Label(dialog, text="请输入新插槽名称:", 
                            font=('微软雅黑', 10),
                            background="#ECECEC")
        name_label.pack(pady=(20, 10))
        
        # 添加名称输入框
        name_var = tk.StringVar()
        name_entry = ttk.Entry(dialog, textvariable=name_var, font=('微软雅黑', 10), width=30)
        name_entry.pack(pady=(0, 20))
        name_entry.focus_set()
        
        # 按钮框架
        button_frame = ttk.Frame(dialog, style='ButtonBG.TFrame')
        button_frame.pack(pady=(0, 20))
        
        # 确定按钮
        def confirm():
            name = name_var.get().strip()
            if not name:
                messagebox.showwarning("输入错误", "插槽名称不能为空！")
                return
            
            if name in self.data['slots']:
                messagebox.showwarning("重复插槽", f"插槽 {name} 已存在！")
                return
            
            # 选择颜色
            color = colorchooser.askcolor(
                title=f"选择插槽 {name} 颜色",
                initialcolor='#4A90E2'
            )[1] or '#4A90E2'
            
            self.data['slots'][name] = {"xp": 0, "target": 100, "increment": 10, "level": 1, "color": color}
            self.add_log(f"新建插槽：{name}")
            self.save_data()
            self.add_slot_ui(name)
            dialog.destroy()
            messagebox.showinfo("成功", f"插槽 {name} 已创建")
        
        ok_btn = ttk.Button(button_frame, text="确定", command=confirm, 
                        style='Primary.TButton')
        ok_btn.pack(side='left', padx=(0, 10))
        
        # 取消按钮
        cancel_btn = ttk.Button(button_frame, text="取消", command=dialog.destroy,
                            style='Secondary.TButton')
        cancel_btn.pack(side='left')
        
        # 绑定回车键
        dialog.bind('<Return>', lambda e: confirm())

    def reset_all(self):
        if messagebox.askyesno("确认重置", "确认要重置所有插槽吗？"):
            for name, s in self.data['slots'].items():
                s['xp'] = 0
                s['level'] = 1
                # 重置目标值为初始值
                if name in DEFAULT_SLOTS:
                    s['target'] = DEFAULT_SLOTS[name]['target']
                else:
                    s['target'] = 100
            self.add_log("已重置所有插槽")
            self.save_data()
            self.refresh_ui()

    def export_json(self):
        default_filename = os.path.join(APP_FOLDER, "绘画学习打卡备份.json")
        path = filedialog.asksaveasfilename(
            defaultextension='.json', 
            filetypes=[('JSON 文件', '*.json')],
            initialfile=os.path.basename(default_filename),
            initialdir=APP_FOLDER
        )
        if path:
            try:
                # 导出插槽数据
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(self.data, f, ensure_ascii=False, indent=2)
                messagebox.showinfo("导出成功", f"进度已导出到 {path}")
            except Exception as e:
                messagebox.showerror("导出失败", str(e))

    def import_json(self):
        default_path = APP_FOLDER
        path = filedialog.askopenfilename(
            filetypes=[('JSON 文件', '*.json')],
            initialdir=default_path
        )
        if path:
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    imported_data = json.load(f)
                
                # 验证数据格式
                if 'slots' in imported_data:
                    self.data = imported_data
                    self.last_saved_data = copy.deepcopy(self.data)
                    messagebox.showinfo("导入成功", f"进度已从 {path} 导入")
                    self.save_data()
                    
                    # 重新创建UI
                    for widget in self.scrollable_frame.winfo_children():
                        widget.destroy()
                    self.slot_frames = {}
                    for name in self.data['slots']:
                        self.add_slot_ui(name)
                    
                    self.refresh_ui()
                    self.last_log_count = 0  # 强制刷新日志
                else:
                    messagebox.showerror("导入失败", "文件格式不正确")
            except Exception as e:
                messagebox.showerror("导入失败", str(e))
    
    def show_slot_detail(self, name):
        s = self.data['slots'][name]
        progress_percent = (s['xp'] / s['target']) * 100 if s['target'] > 0 else 0
        info = f"""插槽：{name}
等级：Lv.{s['level']}
经验值：{s['xp']}/{s['target']} ({progress_percent:.1f}%)
打卡增量：{s['increment']} XP/次
颜色：{s.get('color', '#FFFFFF')}"""
        messagebox.showinfo(f"插槽详情 - {name}", info)

    def reset_slot(self, name):
        if messagebox.askyesno("确认重置", f"确认要重置插槽 {name} 吗？"):
            s = self.data['slots'][name]
            s['xp'] = 0
            s['level'] = 1
            # 重置目标值为初始值
            if name in DEFAULT_SLOTS:
                s['target'] = DEFAULT_SLOTS[name]['target']
            else:
                s['target'] = 100
            self.add_log(f"已重置插槽: {name}")
            self.save_data()
            self.refresh_ui()

    # 新增方法：打开插槽记录文件夹
    def open_slot_records(self, slot_name):
        """打开指定插槽的记录文件夹"""
        records_folder = os.path.join(APP_FOLDER, "打卡记录", slot_name)
        if os.path.exists(records_folder):
            try:
                # 使用系统默认程序打开文件夹
                if os.name == 'nt':  # Windows
                    os.startfile(records_folder)
                elif os.name == 'posix':  # macOS or Linux
                    import subprocess
                    subprocess.call(['open', records_folder] if sys.platform == 'darwin' else ['xdg-open', records_folder])
            except Exception as e:
                messagebox.showerror("错误", f"无法打开文件夹: {e}")
        else:
            messagebox.showinfo("提示", f"插槽 '{slot_name}' 还没有任何记录")

    # 新增方法：打开教程/素材链接
    def open_tutorial(self):
        """打开教程或素材链接"""
        # 这里替换为您实际的教程或素材链接
        tutorial_url = "https://example.com/your-tutorial"  # 请替换为您的实际链接
        
        try:
            import webbrowser
            webbrowser.open(tutorial_url)
            self.add_log("已打开教程/素材链接")
        except Exception as e:
            messagebox.showerror("错误", f"无法打开链接: {e}")

if __name__ == '__main__':
    app = DakaApp()
    app.mainloop()